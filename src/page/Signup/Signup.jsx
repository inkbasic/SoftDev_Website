import BackgroundBlurs from "@/components/BackgroundBlurs";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

import { useNavigate } from "react-router-dom";
import "../global.css";
import React, { useState, useEffect } from "react";

const REGISTER_ENDPOINT = "/auth/register";

export default function Signin() {
    // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
    const [formData, setFormData] = useState({
        firstName: "",
        lastName: "",
        userName: "",
        email: "",
        password: "",
        profileImage: "",
        phoneNumber: "",
    });

    // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState("");
    const [success, setSuccess] = useState("");

    const navigate = useNavigate();

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏õ home
    useEffect(() => {
        const token = localStorage.getItem("jwtToken") || sessionStorage.getItem("jwtToken");
        if (token) navigate("/", { replace: true });
    }, [navigate]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.id]: e.target.value });
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError("");
        setSuccess("");

        try {
            const res = await fetch(REGISTER_ENDPOINT, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(formData), // ‡πÅ‡∏õ‡∏•‡∏á formData ‡πÄ‡∏õ‡πá‡∏ô JSON string
            });

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response status ‡πÄ‡∏õ‡πá‡∏ô OK ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!res.ok) {
                const errorData = await res.json(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error ‡∏à‡∏≤‡∏Å API
                throw new Error(errorData.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‚ùå");
            }

            const data = await res.json(); // parse response JSON

            setSuccess("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ");
            console.log("API Response:", data);

            // ‚úÖ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á login
            navigate("/", { replace: true });
        } catch (err) {
            setError(err.message); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
            console.error(err);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="flex items-center justify-center py-20 background">
            {/* Background Glow Circle */}
            {/* <BackgroundBlurs /> */}

            {/* Content */}
            <Card className="z-10 w-full max-w-sm">
                <CardHeader>
                    <CardTitle>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô üöÄ</CardTitle>
                    <CardDescription>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</CardDescription>
                </CardHeader>

                <CardContent>
                    <form onSubmit={handleSubmit}>
                        <div className="flex flex-col gap-6">
                            <div className="grid gap-2">
                                <Label htmlFor="userName">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Username)</Label>
                                <Input
                                    id="userName"
                                    type="text"
                                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÄ‡∏ä‡πà‡∏ô namth_99"
                                    required
                                    value={formData.userName}
                                    onChange={handleChange}
                                />
                            </div>

                            <div className="grid gap-2">
                                <Label htmlFor="email">‡∏≠‡∏µ‡πÄ‡∏°‡∏• (Email)</Label>
                                <Input
                                    id="email"
                                    type="email"
                                    placeholder="example@email.com"
                                    required
                                    value={formData.email}
                                    onChange={handleChange}
                                />
                            </div>

                            <div className="grid gap-2">
                                <Label htmlFor="password">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (Password)</Label>
                                <Input
                                    id="password"
                                    type="password"
                                    placeholder="‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
                                    required
                                    value={formData.password}
                                    onChange={handleChange}
                                />
                            </div>

                            <div className="grid gap-2">
                                <Label htmlFor="firstName">‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á (First Name)</Label>
                                <Input
                                    id="firstName"
                                    type="text"
                                    placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á"
                                    value={formData.firstName}
                                    onChange={handleChange}
                                />
                            </div>

                            <div className="grid gap-2">
                                <Label htmlFor="lastName">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (Last Name)</Label>
                                <Input
                                    id="lastName"
                                    type="text"
                                    placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                                    value={formData.lastName}
                                    onChange={handleChange}
                                />
                            </div>

                            <div className="grid gap-2">
                                <Label htmlFor="phoneNumber">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (Phone Number)</Label>
                                <Input
                                    id="phoneNumber"
                                    type="text"
                                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 0812345678"
                                    value={formData.phoneNumber}
                                    onChange={handleChange}
                                />
                            </div>

                            <div className="grid gap-2">
                                <Label htmlFor="profileImage">URL ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (Profile Image)</Label>
                                <Input
                                    id="profileImage"
                                    type="text"
                                    placeholder="‡∏ß‡∏≤‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
                                    value={formData.profileImage}
                                    onChange={handleChange}
                                />
                            </div>
                        </div>

                        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Loading / Error / Success */}
                        {loading && <p className="mt-3 text-sm text-blue-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å...</p>}
                        {error && <p className="mt-3 text-sm text-red-500">{error}</p>}
                        {success && <p className="mt-3 text-sm text-green-500">{success}</p>}
                    </form>
                </CardContent>

                <CardFooter className="flex-col gap-3">
                    <Button
                        type="submit"
                        className="w-full text-sm bg-gradient-to-l from-[#FF7474] to-[#FF9F43]"
                        onClick={handleSubmit}
                        disabled={loading}
                    >
                        ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                    </Button>

                    <div className="flex items-center justify-center gap-2 text-sm">
                        ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß?
                        <a href="/login" className="!px-0 ml-auto text-sm text-black no-underline  hover:underline">
                            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                        </a>
                    </div>
                </CardFooter>
            </Card>
        </div>
    );
}
