// import { Badge } from "@/components/ui/badge";
// import { Button } from "@/components/ui/button";
// import { Card } from "@/components/ui/card";
// import { Input } from "@/components/ui/input";
// import { Funnel, ChevronDown, Ellipsis, Briefcase, Users } from "lucide-react";

// export function TripCard({ title, date, badges, description, maxDescLength = 125 }) {
//     const shortDesc = description.length > maxDescLength ? description.slice(0, maxDescLength) + " ..." : description;

//     return (
//         <Card className="p-6">
//             <div className="flex flex-col gap-2">
//                 <div className="flex justify-between">
//                     <div className="flex flex-col gap-1">
//                         <h4>{title}</h4>
//                         <p className="text-sm text-neutral-500">{date}</p>
//                     </div>
//                     <Ellipsis />
//                 </div>

//                 {/* Badge */}
//                 <div className="flex flex-wrap gap-1">
//                     {badges.map((b, idx) => (
//                         <Badge
//                             key={idx}
//                             variant="secondary"
//                             style={b.color ? { backgroundColor: b.color } : undefined} // ‡πÉ‡∏ä‡πâ style ‡πÅ‡∏ó‡∏ô class
//                         >
//                             {b.isProvince && <Briefcase className="w-4 h-4 mr-1" />}
//                             {b.isPeople && <Users className="w-4 h-4 mr-1" />}
//                             {b.label}
//                         </Badge>
//                     ))}
//                 </div>
//             </div>

//             {/* detail */}
//             <p className="mt-1 text-sm">{shortDesc}</p>
//         </Card>
//     );
// }

// export default function Save() {
//     return (
//         <div className="flex flex-col items-center justify-center gap-12 px-6 py-20">
//             <header className="flex flex-col items-start justify-between w-full max-w-5xl gap-3 lg:flex-row lg:items-center">
//                 <div className="flex flex-col w-full gap-2 sm:flex-row lg:gap-6 lg:max-w-xl">
//                     <h1 className="text-2xl font-semibold text-nowrap">‡πÅ‡∏ú‡∏ô‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h1>
//                     <Input type="text" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠ / ‡πÅ‡∏ó‡πá‡∏Å" />
//                 </div>
//                 <Button variant="destructive">
//                     <Funnel />
//                     ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
//                     <ChevronDown />
//                 </Button>
//             </header>
//             <main className="grid w-full max-w-5xl grid-cols-1 gap-4 md:grid-cols-3">
//                 {Array.from({ length: 8 }).map((_, index) => (
//                     <TripCard
//                         key={index}
//                         title="üìç ‡∏ó‡∏£‡∏¥‡∏õ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ô"
//                         date="10‚Äì12 ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô 2025"
//                         description="‡∏ó‡∏£‡∏¥‡∏õ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 3 ‡∏ß‡∏±‡∏ô 2 ‡∏Ñ‡∏∑‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ä‡∏≠‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏° ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û ‡∏ä‡∏°‡∏ß‡∏¥‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø"
//                         badges={[
//                             { label: "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", color: "#DDFAE7", isProvince: true },
//                             { label: "4 ‡∏Ñ‡∏ô", color: "#DDF2FF", isPeople: true },
//                             { label: "‡∏Ñ‡∏ô‡∏ä‡∏£‡∏≤", color: "#CBFAF0" },
//                         ]}
//                     />
//                 ))}
//             </main>
//         </div>
//     );
// }

// src/pages/SavePlans.jsx
import React, { useEffect, useMemo, useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Funnel, ChevronDown, Ellipsis, Briefcase, Users } from "lucide-react";

/* ----------------------------- Utilities ----------------------------- */
// ‡∏≠‡πà‡∏≤‡∏ô token ‡∏à‡∏≤‡∏Å localStorage/sessionStorage
function getToken() {
    return localStorage.getItem("jwtToken") || sessionStorage.getItem("jwtToken") || "jwtToken";
}

// ‡∏£‡∏ß‡∏° URL ‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î‡∏™‡πÅ‡∏•‡∏ä‡∏ã‡πâ‡∏≥/‡∏Ç‡∏≤‡∏î (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô dev ‡πÉ‡∏ä‡πâ proxy, ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á API_BASE = "")
function joinUrl(base, path) {
    const b = (base || "").replace(/\/+$/, "");
    const p = (path || "").replace(/^\/+/, "");
    return `${b}/${p}`;
}

// ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï date-range ‡πÑ‡∏ó‡∏¢‡∏à‡∏≤‡∏Å ISO (‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO +07:00 ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πÄ‡∏õ‡∏Å‡πÉ‡∏´‡πâ‡∏°‡∏≤)
function formatThaiRange(startISO, endISO) {
    try {
        const s = new Date(startISO);
        const e = new Date(endISO);
        const sameDay =
            s.getFullYear() === e.getFullYear() && s.getMonth() === e.getMonth() && s.getDate() === e.getDate();

        const dateOpt = { timeZone: "Asia/Bangkok", year: "numeric", month: "long", day: "numeric" };
        const timeOpt = { timeZone: "Asia/Bangkok", hour: "2-digit", minute: "2-digit" };

        if (sameDay) {
            return `${s.toLocaleDateString("th-TH", dateOpt)} ‚Ä¢ ${s.toLocaleTimeString(
                "th-TH",
                timeOpt
            )}‚Äì${e.toLocaleTimeString("th-TH", timeOpt)}`;
        }
        return `${s.toLocaleDateString("th-TH", dateOpt)} ‚Äì ${e.toLocaleDateString("th-TH", dateOpt)}`;
    } catch {
        return `${startISO} ‚Äì ${endISO}`;
    }
}

// ‡∏™‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏° badge ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
const COLOR = {
    province: "#DDFAE7",
    people: "#DDF2FF",
    tag: "#CBFAF0",
};

/* ----------------------------- UI: TripCard ----------------------------- */
export function TripCard({ title, date, badges, description, maxDescLength = 125 }) {
    const shortDesc =
        (description || "").length > maxDescLength ? description.slice(0, maxDescLength) + " ..." : description || "-";

    return (
        <Card className="p-6">
            <div className="flex flex-col gap-2">
                <div className="flex justify-between">
                    <div className="flex flex-col gap-1">
                        <h4 className="font-semibold">{title}</h4>
                        <p className="text-sm text-neutral-500">{date}</p>
                    </div>
                    <Ellipsis className="text-neutral-500" />
                </div>

                {/* Badges */}
                <div className="flex flex-wrap gap-1">
                    {badges.map((b, idx) => (
                        <Badge key={idx} variant="secondary" style={b.color ? { backgroundColor: b.color } : undefined}>
                            {b.isProvince && <Briefcase className="w-4 h-4 mr-1" />}
                            {b.isPeople && <Users className="w-4 h-4 mr-1" />}
                            {b.label}
                        </Badge>
                    ))}
                </div>
            </div>

            {/* detail */}
            <p className="mt-1 text-sm">{shortDesc}</p>
        </Card>
    );
}

/* ----------------------------- Main Page ----------------------------- */
export default function SavePlans() {
    // ‡∏ï‡∏±‡πâ‡∏á base URL ‡∏ú‡πà‡∏≤‡∏ô .env (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Vite proxy ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á)
    const API_BASE = import.meta.env.VITE_API_BASE || "";
    const ENDPOINT = "/plans";

    const [plans, setPlans] = useState([]); // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å API (array)
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(""); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    const [q, setQ] = useState(""); // ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠/‡πÅ‡∏ó‡πá‡∏Å/‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢)
    const [onlyUpcoming, setOnlyUpcoming] = useState(false); // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
    useEffect(() => {
        let aborted = false;

        async function fetchPlans() {
            setLoading(true);
            setError("");
            try {
                const url = joinUrl(API_BASE, ENDPOINT);
                const res = await fetch(url, {
                    method: "GET",
                    headers: {
                        Accept: "application/json",
                        "Cache-Control": "no-cache",
                        Authorization: `Bearer ${getToken()}`,
                    },
                    cache: "no-store",
                });

                // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏≠‡∏ö 304/204 ‡∏´‡∏£‡∏∑‡∏≠ content-type ‡πÅ‡∏õ‡∏•‡∏Å ‡πÜ
                let data = null;
                const ct = res.headers.get("content-type") || "";
                if (res.status === 204) data = [];
                else if (ct.includes("application/json")) data = await res.json();
                else {
                    const text = await res.text();
                    try {
                        data = JSON.parse(text);
                    } catch {
                        data = [];
                    }
                }

                if (!res.ok) {
                    const msg = (data && (data.message || data.error)) || `${res.status} ${res.statusText}`;
                    throw new Error(msg);
                }

                if (!aborted) setPlans(Array.isArray(data) ? data : []);
            } catch (e) {
                if (!aborted) setError(e?.message || "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
            } finally {
                if (!aborted) setLoading(false);
            }
        }

        fetchPlans();
        return () => {
            aborted = true;
        };
    }, [API_BASE]);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• plan -> props ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î + ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡∏Å‡∏£‡∏≠‡∏á
    const filtered = useMemo(() => {
        const now = Date.now();
        const term = q.trim().toLowerCase();

        return (plans || []).filter((p) => {
            const withinUpcoming = !onlyUpcoming || (p?.endTime && new Date(p.endTime).getTime() >= now);
            const inText =
                !term ||
                (p?.name && p.name.toLowerCase().includes(term)) ||
                (p?.destination && p.destination.toLowerCase().includes(term)) ||
                (Array.isArray(p?.preferredTags) && p.preferredTags.join(" ").toLowerCase().includes(term)) ||
                (Array.isArray(p?.source) && p.source.join(" ").toLowerCase().includes(term));
            return withinUpcoming && inText;
        });
    }, [plans, q, onlyUpcoming]);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á badge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏£‡∏¥‡∏õ
    function toBadges(plan) {
        const badges = [];
        if (plan?.destination) badges.push({ label: plan.destination, color: COLOR.province, isProvince: true });
        if (Number.isFinite(Number(plan?.groupSize)))
            badges.push({ label: `${plan.groupSize} ‡∏Ñ‡∏ô`, color: COLOR.people, isPeople: true });
        if (Array.isArray(plan?.preferredTags)) {
            plan.preferredTags.slice(0, 3).forEach((t) => badges.push({ label: t, color: COLOR.tag }));
        }
        return badges;
    }

    return (
        <div className="flex flex-col items-center justify-center gap-12 px-6 py-20">
            {/* Header / Controls */}
            <header className="flex flex-col items-start justify-between w-full max-w-5xl gap-3 lg:flex-row lg:items-center">
                <div className="flex flex-col w-full gap-2 sm:flex-row lg:gap-6 lg:max-w-xl">
                    <h5 className="text-2xl font-semibold text-nowrap">‡πÅ‡∏ú‡∏ô‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h5>
                    <Input
                        type="text"
                        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ / ‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢ / ‡πÅ‡∏ó‡πá‡∏Å"
                        value={q}
                        onChange={(e) => setQ(e.target.value)}
                    />
                </div>
                <div className="flex gap-2">
                    <Button
                        variant={onlyUpcoming ? "default" : "outline"}
                        onClick={() => setOnlyUpcoming((v) => !v)}
                        title="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏£‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö"
                    >
                        <Funnel className="mr-2" />
                        ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏£‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á
                        <ChevronDown className="ml-2" />
                    </Button>
                </div>
            </header>

            {/* States */}
            {loading && (
                <div className="w-full max-w-5xl">
                    <Card className="p-6">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Ä¶</Card>
                </div>
            )}

            {!!error && (
                <div className="w-full max-w-5xl">
                    <Card className="p-6 text-red-700 border-red-300 bg-red-50">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}</Card>
                </div>
            )}

            {!loading && !error && filtered.length === 0 && (
                <div className="w-full max-w-5xl">
                    <Card className="p-6">‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß</Card>
                </div>
            )}

            {/* List */}
            {!loading && !error && filtered.length > 0 && (
                <main className="grid w-full max-w-5xl grid-cols-1 gap-4 md:grid-cols-3">
                    {filtered.map((plan, idx) => (
                        <TripCard
                            key={plan._id || plan.id || idx}
                            title={`üìç ${plan.name || "‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ"}`}
                            date={formatThaiRange(plan.startTime, plan.endTime)}
                            description={[
                                plan.source?.length ? `‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å: ${plan.source.join(", ")}` : null,
                                plan.destination ? `‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢: ${plan.destination}` : null,
                                Number.isFinite(Number(plan.budget))
                                    ? `‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${Number(plan.budget).toLocaleString("th-TH")} ‡∏ö‡∏≤‡∏ó`
                                    : null,
                            ]
                                .filter(Boolean)
                                .join(" ‚Ä¢ ")}
                            badges={toBadges(plan)}
                        />
                    ))}
                </main>
            )}
        </div>
    );
}
