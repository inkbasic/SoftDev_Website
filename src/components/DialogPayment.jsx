import { useEffect, useMemo, useState } from "react";
import PropTypes from "prop-types";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectGroup, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import {
    Dialog,
    DialogClose,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from "@/components/ui/dialog";
import { BanknoteArrowDown } from "lucide-react";

// ---------- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏π‡∏ó‡∏¥‡∏• ----------
const API_BASE = import.meta.env.VITE_API_BASE_URL || ""; // ‡πÄ‡∏ä‡πà‡∏ô https://api.example.com
const API_ENDPOINT = "/ad"; // ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤
const MONGO_ID_RX = /^[a-f0-9]{24}$/i;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
const formatISO = (iso) => {
    try {
        return new Intl.DateTimeFormat(undefined, {
            year: "numeric",
            month: "short",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
        }).format(new Date(iso));
    } catch {
        return iso || "-";
    }
};

// ---------- ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å ----------
/**
 * DialogPayment
 * - ‡∏£‡∏±‡∏ö prop ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡∏∑‡∏≠ placeId
 * - ‡πÄ‡∏õ‡∏¥‡∏î Dialog ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£/‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏¥‡∏á POST /ad
 * - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading / error / success
 */
export default function DialogPayment({ placeId }) {
    // ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    const [method, setMethod] = useState("Credit Card"); // ‡∏™‡πÄ‡∏õ‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á "Credit Card"
    const [durationDays, setDurationDays] = useState(5); // ‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡πÄ‡∏õ‡∏Å
    const [price, setPrice] = useState(5000);

    const [holder, setHolder] = useState("");
    const [email, setEmail] = useState("");
    const [number, setNumber] = useState("");
    const [expiry, setExpiry] = useState("");
    const [cvc, setCvc] = useState("");

    const [loading, setLoading] = useState(false);
    const [errMsg, setErrMsg] = useState("");
    const [result, setResult] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö response 201
    const [open, setOpen] = useState(false);

    // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤ placeId ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà MongoId (‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏ö 400 ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤)
    const invalidPlaceId = useMemo(() => !placeId || !MONGO_ID_RX.test(placeId), [placeId]);

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î dialog ‡πÉ‡∏´‡∏°‡πà
    useEffect(() => {
        if (!open) {
            setErrMsg("");
            setResult(null);
            setLoading(false);
        }
    }, [open]);

    // ‡∏î‡∏∂‡∏á JWT ‡∏à‡∏≤‡∏Å localStorage ‡πÅ‡∏ö‡∏ö‡πÄ‡∏°‡πÇ‡∏° (‡∏•‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏ã‡πâ‡∏≥ ‡πÜ)
    const jwtToken = useMemo(() => localStorage.getItem("jwtToken") || "", []);

    // ---------- ‡∏¢‡∏¥‡∏á API ----------
    const handleSubmit = async (e) => {
        e.preventDefault();
        setErrMsg("");
        setResult(null);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        if (invalidPlaceId) {
            setErrMsg("placeId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô MongoId 24 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ê‡∏≤‡∏ô 16)");
            return;
        }
        if (!jwtToken) {
            setErrMsg("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
            return;
        }
        if (!holder || !email || !number || !expiry || !cvc) {
            setErrMsg("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
            return;
        }
        if (!durationDays || durationDays <= 0) {
            setErrMsg("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
            return;
        }
        if (!price || price <= 0) {
            setErrMsg("‡∏£‡∏≤‡∏Ñ‡∏≤/Amount ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
            return;
        }

        setLoading(true);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Å
        const payload = {
            placeId: placeId,
            durationDays: Number(durationDays),
            price: Number(price),
            transaction: {
                method,
                cardInfo: {
                    holder,
                    email,
                    number,
                    expiry,
                    cvc,
                },
            },
        };

        try {
            const res = await fetch(`${API_BASE}${API_ENDPOINT}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${jwtToken}`, // ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Å
                },
                body: JSON.stringify(payload),
            });

            const text = await res.text();
            let data = null;
            if (text) {
                try {
                    data = JSON.parse(text);
                } catch {
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏Å‡πá‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô null
                }
            }

            if (!res.ok) {
                // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á error 400 ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤
                if (res.status === 400 && data?.message) {
                    // message ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° validate
                    const msg =
                        Array.isArray(data.message) && data.message.length
                            ? data.message.join(", ")
                            : data.message || "Bad Request";
                    throw new Error(msg);
                }
                throw new Error(data?.error || data?.message || `Server error (status ${res.status})`);
            }

            // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á 201 + data object)
            setResult(data?.data || null);
        } catch (err) {
            setErrMsg(err?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠");
        } finally {
            setLoading(false);
        }
    };

    // ---------- UI ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ----------
    const SuccessView = () => {
        if (!result) return null;
        return (
            <div className="p-4 space-y-2 border rounded-2xl bg-green-50">
                <p className="font-semibold">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ</p>
                <div className="grid gap-1 text-sm">
                    <div>
                        <span className="font-medium">Ad ID:</span> {result.id}
                    </div>
                    <div>
                        <span className="font-medium">Provider:</span> {result.providerId}
                    </div>
                    <div>
                        <span className="font-medium">Place:</span> {result.placeId}
                    </div>
                    <div>
                        <span className="font-medium">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span> {result.status}
                    </div>
                    <div>
                        <span className="font-medium">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô:</span> {result.durationDays}
                    </div>
                    <div>
                        <span className="font-medium">‡∏£‡∏≤‡∏Ñ‡∏≤:</span> {Number(result.price).toLocaleString()}
                    </div>
                    <div>
                        <span className="font-medium">‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏:</span> {formatISO(result.expireAt)}
                    </div>
                </div>
                <div className="flex gap-2 pt-2">
                    <Button type="button" variant="secondary" onClick={() => navigator.clipboard?.writeText(result.id)}>
                        ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Ad ID
                    </Button>
                    <Button type="button" onClick={() => setOpen(false)}>
                        ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
                    </Button>
                </div>
            </div>
        );
    };

    return (
        <Dialog open={open} onOpenChange={setOpen}>
            <DialogTrigger asChild>
                <Button variant="ghost" size="icon" className="size-8">
                    <BanknoteArrowDown className="w-4 h-4" />
                </Button>
            </DialogTrigger>

            <DialogContent className="w-xs sm:w-md">
                <DialogHeader>
                    <DialogTitle>‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤</DialogTitle>
                    <DialogDescription>‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô, ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£</DialogDescription>
                </DialogHeader>

                {/* ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ ‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° */}
                {result ? (
                    <SuccessView />
                ) : (
                    <form onSubmit={handleSubmit} className="grid gap-5">
                        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ad */}
                        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                            <div className="grid gap-2">
                                <Label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô (durationDays)</Label>
                                <Input
                                    type="number"
                                    min={1}
                                    value={durationDays}
                                    onChange={(e) => setDurationDays(Number(e.target.value))}
                                />
                            </div>
                            <div className="grid gap-2">
                                <Label>‡∏£‡∏≤‡∏Ñ‡∏≤ (price)</Label>
                                <Input
                                    type="number"
                                    min={1}
                                    value={price}
                                    onChange={(e) => setPrice(Number(e.target.value))}
                                />
                            </div>
                        </div>

                        {/* ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
                        <div className="grid gap-2">
                            <Label>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</Label>
                            <Select value={method} onValueChange={setMethod}>
                                <SelectTrigger className="w-full">
                                    <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectGroup>
                                        <SelectItem value="Credit Card">‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï</SelectItem>
                                        {/* ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÅ‡∏ï‡πà‡∏™‡πÄ‡∏õ‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á 'Credit Card' */}
                                        <SelectItem value="PromptPay" disabled>
                                            PromptPay (‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ)
                                        </SelectItem>
                                        <SelectItem value="Wallet" disabled>
                                            Wallet (‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ)
                                        </SelectItem>
                                    </SelectGroup>
                                </SelectContent>
                            </Select>
                        </div>

                        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£ */}
                        <div className="grid gap-3">
                            <Label>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£</Label>
                            <div className="grid gap-3 pt-2">
                                <div className="grid gap-3 sm:grid-cols-2">
                                    <div className="grid gap-1.5">
                                        <Label htmlFor="holder">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ô‡∏ö‡∏±‡∏ï‡∏£</Label>
                                        <Input
                                            id="holder"
                                            placeholder="John Doe"
                                            value={holder}
                                            onChange={(e) => setHolder(e.target.value)}
                                        />
                                    </div>
                                    <div className="grid gap-1.5">
                                        <Label htmlFor="email">‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</Label>
                                        <Input
                                            id="email"
                                            type="email"
                                            placeholder="john@example.com"
                                            value={email}
                                            onChange={(e) => setEmail(e.target.value)}
                                        />
                                    </div>
                                </div>

                                <div className="grid gap-3 pt-2 sm:grid-cols-2">
                                    <div className="grid gap-1.5">
                                        <Label htmlFor="number">‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£</Label>
                                        <Input
                                            id="number"
                                            inputMode="numeric"
                                            placeholder="4111 1111 1111 1111"
                                            value={number}
                                            onChange={(e) => setNumber(e.target.value)}
                                        />
                                    </div>
                                    <div className="grid grid-cols-2 gap-3">
                                        <div className="grid gap-1.5">
                                            <Label htmlFor="expiry">MM/YY</Label>
                                            <Input
                                                id="expiry"
                                                placeholder="12/26"
                                                value={expiry}
                                                onChange={(e) => setExpiry(e.target.value)}
                                            />
                                        </div>
                                        <div className="grid gap-1.5">
                                            <Label htmlFor="cvc">CVC</Label>
                                            <Input
                                                id="cvc"
                                                inputMode="numeric"
                                                placeholder="123"
                                                value={cvc}
                                                onChange={(e) => setCvc(e.target.value)}
                                            />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
                        {loading && <p className="text-sm text-blue-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...</p>}
                        {errMsg && <p className="text-sm text-red-600">{errMsg}</p>}

                        <DialogFooter className="flex gap-2">
                            <DialogClose asChild>
                                <Button type="button" variant="outline">
                                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </Button>
                            </DialogClose>
                            <Button type="submit" disabled={loading}>
                                {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô..." : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"}
                            </Button>
                        </DialogFooter>
                    </form>
                )}
            </DialogContent>
        </Dialog>
    );
}

DialogPayment.propTypes = {
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô MongoId 24 ‡∏ï‡∏±‡∏ß
    placeId: PropTypes.string.isRequired,
};
